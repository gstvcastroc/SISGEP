// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SISGEP.Application.Data;

#nullable disable

namespace SISGEP.Application.Migrations
{
    [DbContext(typeof(SISGEPContext))]
    [Migration("20220911201134_CreateDatabase")]
    partial class CreateDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AnsweredQuestionnairePerson", b =>
                {
                    b.Property<Guid>("AnswersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BenefitedsId")
                        .HasColumnType("uuid");

                    b.HasKey("AnswersId", "BenefitedsId");

                    b.HasIndex("BenefitedsId");

                    b.ToTable("AnsweredQuestionnairePerson");
                });

            modelBuilder.Entity("PersonProject", b =>
                {
                    b.Property<Guid>("PersonsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectsId")
                        .HasColumnType("uuid");

                    b.HasKey("PersonsId", "ProjectsId");

                    b.HasIndex("ProjectsId");

                    b.ToTable("PersonProject");
                });

            modelBuilder.Entity("SISGEP.Application.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Complement")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<int>("Number")
                        .HasColumnType("smallserial");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("varchar(8)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Thoroughfare")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("SISGEP.Application.Entities.AnsweredQuestionnaire", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("uuid");

                    b.Property<string>("Structure")
                        .IsRequired()
                        .HasColumnType("json");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("answered-questionnaires", (string)null);
                });

            modelBuilder.Entity("SISGEP.Application.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("varchar(9)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PersonType")
                        .IsRequired()
                        .HasColumnType("varchar(9)");

                    b.HasKey("Id");

                    b.ToTable("persons", (string)null);
                });

            modelBuilder.Entity("SISGEP.Application.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("SISGEP.Application.Entities.Questionnaire", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Structure")
                        .IsRequired()
                        .HasColumnType("json");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("questionnaires", (string)null);
                });

            modelBuilder.Entity("AnsweredQuestionnairePerson", b =>
                {
                    b.HasOne("SISGEP.Application.Entities.AnsweredQuestionnaire", null)
                        .WithMany()
                        .HasForeignKey("AnswersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SISGEP.Application.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("BenefitedsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonProject", b =>
                {
                    b.HasOne("SISGEP.Application.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SISGEP.Application.Entities.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SISGEP.Application.Entities.Address", b =>
                {
                    b.HasOne("SISGEP.Application.Entities.Person", "Person")
                        .WithOne("Address")
                        .HasForeignKey("SISGEP.Application.Entities.Address", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SISGEP.Application.Entities.AnsweredQuestionnaire", b =>
                {
                    b.HasOne("SISGEP.Application.Entities.Questionnaire", "Questionnaire")
                        .WithMany("AnsweredQuestionnaires")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("SISGEP.Application.Entities.Questionnaire", b =>
                {
                    b.HasOne("SISGEP.Application.Entities.Project", "Project")
                        .WithOne("Questionnaire")
                        .HasForeignKey("SISGEP.Application.Entities.Questionnaire", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SISGEP.Application.Entities.Person", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("SISGEP.Application.Entities.Project", b =>
                {
                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("SISGEP.Application.Entities.Questionnaire", b =>
                {
                    b.Navigation("AnsweredQuestionnaires");
                });
#pragma warning restore 612, 618
        }
    }
}
